import{_ as t}from"./chunks/preview.X5F7JaTk.js";import{_ as e,o as l,c as n,R as d}from"./chunks/framework._hq9T-Fw.js";const _=JSON.parse('{"title":"Attributes","description":"","frontmatter":{},"headers":[],"relativePath":"docs/004_attributes.md","filePath":"docs/004_attributes.md","lastUpdated":1703419476000}'),a={name:"docs/004_attributes.md"},r=d('<h1 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h1><p>插件提供了以下属性：</p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">说明</th><th style="text-align:center;">类型</th><th style="text-align:center;">可选值</th><th style="text-align:center;">默认值</th></tr></thead><tbody><tr><td style="text-align:center;">danmus</td><td style="text-align:center;">弹幕元素列表，支持纯文本或者自定义对象(支持 v-model)</td><td style="text-align:center;">Array</td><td style="text-align:center;">字符串[]或对象[]</td><td style="text-align:center;">必填</td></tr><tr><td style="text-align:center;">channels</td><td style="text-align:center;">轨道数量</td><td style="text-align:center;">Number</td><td style="text-align:center;"></td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">autoplay</td><td style="text-align:center;">是否自动播放</td><td style="text-align:center;">Boolean</td><td style="text-align:center;"></td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">loop</td><td style="text-align:center;">是否开启弹幕循环</td><td style="text-align:center;">Boolean</td><td style="text-align:center;"></td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">fontSize</td><td style="text-align:center;">弹幕字号（slot 模式下不可用）</td><td style="text-align:center;">Number</td><td style="text-align:center;"></td><td style="text-align:center;">18</td></tr><tr><td style="text-align:center;">extraStyle</td><td style="text-align:center;">额外样式（slot 模式下不可用）</td><td style="text-align:center;">String</td><td style="text-align:center;"></td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">speeds</td><td style="text-align:center;">弹幕速度（每秒移动的像素数）</td><td style="text-align:center;">Number</td><td style="text-align:center;"></td><td style="text-align:center;">100</td></tr><tr><td style="text-align:center;">debounce</td><td style="text-align:center;">弹幕刷新频率(ms)</td><td style="text-align:center;">Number</td><td style="text-align:center;"></td><td style="text-align:center;">100</td></tr><tr><td style="text-align:center;">randomChannel</td><td style="text-align:center;">随机选择轨道插入</td><td style="text-align:center;">Boolean</td><td style="text-align:center;"></td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">top</td><td style="text-align:center;">弹幕垂直间距(px)</td><td style="text-align:center;">Number</td><td style="text-align:center;"></td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">right</td><td style="text-align:center;">弹幕水平间距(px)</td><td style="text-align:center;">Number</td><td style="text-align:center;"></td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">isSuspend</td><td style="text-align:center;">是否开启弹幕悬浮暂停</td><td style="text-align:center;">Boolean</td><td style="text-align:center;"></td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">useSlot</td><td style="text-align:center;">是否开启弹幕插槽</td><td style="text-align:center;">Boolean</td><td style="text-align:center;"></td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">useSuspendSlot</td><td style="text-align:center;">是否开启弹幕悬浮时插槽（开启isSuspend时可用）</td><td style="text-align:center;">Boolean</td><td style="text-align:center;"></td><td style="text-align:center;">false</td></tr></tbody></table><p>你可根据自己的需求任意的使用这些属性，但是需要注意的是：</p><ol><li><code>channels</code> 为 0 时，轨道数为容器可容纳最多轨道数（整个容器）;</li><li><code>danmus</code> 初始化后如果为空，则 <code>autoplay</code> 失效。因此对于异步加载的弹幕数据，需要手动调用 <code>refName.value.play()</code> 进行播放;</li><li>弹幕刷新频率为每隔多长时间插入一条弹幕;</li></ol><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>具体使用情况不在赘述，详情可参考<a href="https://github.com/dshuais/danmaku-vue/blob/main/src/App.vue" target="_blank" rel="noreferrer">demo</a>。</p><h2 id="preview" tabindex="-1">Preview <a class="header-anchor" href="#preview" aria-label="Permalink to &quot;Preview&quot;">​</a></h2><p><a href="https://dshuais.github.io/danmaku-vue/" target="_blank" rel="noreferrer">预览地址</a>即为 <code>demo</code> 效果。</p><p><img src="'+t+'" alt="Preview"></p>',10),s=[r];function i(c,g,o,x,y,u){return l(),n("div",null,s)}const m=e(a,[["render",i]]);export{_ as __pageData,m as default};
